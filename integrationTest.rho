/////////////////////////
// myRhobustContractTEST : test rhobustFactory102
new myRhobustContractTEST, ack, stdoutAck(`rho:io:stdoutAck`) in {

  stdoutAck!("TEST : Creating sample rhobust contract. 3 agents (employer, employee, IRS)", *ack)
    |  // <- concurrent (log test start)
  @"rhobustFactory102"!(*myRhobustContractTEST, 3)
    |  // <- concurrent (run test)
  // This levels of recursivity is only needed to simulate a sequential test.
  // In real life, agents interact INDEPENDENTLY and sometimes CONCURRENTLY.
  for(_ <- ack) {
    myRhobustContractTEST!("Joe", "secretkey_employee", *ack)
    |  // <- concurrent (callback)
    for(res <- ack) {
        stdoutAck!(*res, *ack) 
        |  // <- concurrent (callback)
        for(_ <- ack) {
            myRhobustContractTEST!("irs", "secretkey_irs", *ack)
            |  // <- concurrent (callback)
            for(res <- ack) {
                stdoutAck!(*res, *ack)   
                |  // <- concurrent (callback)
                for(_ <- ack) {
                    myRhobustContractTEST!("boss", "secretkey_employer" , *ack) 
                    |  // <- concurrent (callback)
                    for(res <- ack) {
                        stdoutAck!(*res, *ack)   
                        |  // <- concurrent (callback)
                        for(_ <- ack) {
                            myRhobustContractTEST!("Sam", "dummy_key", *ack)
                            |  // <- concurrent (callback)
                            for(res <- ack) {
                                stdoutAck!(*res, *ack)
                            }
                        }
                    }
                }
            }
        }
    }
  }
}