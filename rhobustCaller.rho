// emmanuel.botros@gmail.com

contract @"rhobustFactory"(rhobustId, @n) = {
    new pay, invoiceId, invoiceAmount, invoiceName, processIncomeTax, widthdraw, taxPay,
    ri(`rho:registry:insertArbitrary`), 
    rl(`rho:registry:lookup`),
    stdout(`rho:io:stdout`),
    stdoutAck(`rho:io:stdoutAck`), ack, countCh, logResolve, logTransaction in {
       
        // Count state channel starts at one
        countCh!(1)
        |  
        contract logResolve(@message, @oldCt, cb) = {
            stdout!(message)
            |  // <- concurrent
            cb!(message)
            |  // <- concurrent
            countCh!(oldCt + 1)
        
        }
        |  
        contract logTransaction(@tid,@name,@amount,@message) = {
            stdout!(tid)
            |  // <- concurrent
            stdout!(name)
            |  // <- concurrent
            stdout!(amount)
            |  // <- concurrent
            stdout!(message)
        }
        |  
        contract rhobustId(@agentType, @secretKey, result) = {
            for(@oldCount <- countCh) {
                if (agentType == "boss" and secretKey == "secretkey_employer") {
                    // agent A (Employer) has been identified
                    pay!(*invoiceId, *invoiceName, *invoiceAmount, "Joe", 100)
                    |  // <- concurrent
                    logResolve!("Hello " ++ agentType ++ ", let's pay Joe. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, oldCount, *result)
                } else 
                if (agentType == "Joe" and secretKey == "secretkey_employee") {
                    // agent B (Employee) has been identified
                    logResolve!("Hello " ++ agentType ++ ", you will get payed soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, oldCount, *result)
                }  else 
                if (agentType == "irs" and secretKey == "secretkey_irs") {
                    // agent C (IRS) has been identified
                    logResolve!("Hello " ++ agentType ++ ", tax income will be transfered soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, oldCount, *result)
                } else {
                    // NOTHING happens otherwise
                }
            }
        }
        | 
        // when a payment occurs, these three actions are triggered .. CONCURRENTLY !!
        for(@paymentId <- invoiceId;@paymentName <- invoiceName;@amount <- invoiceAmount) {
            // agent B (Employee)
            widthdraw!(paymentId, paymentName, amount/2, *ack)
            |  // <- concurrent
            // agent B (Employee)
            taxPay!(paymentId, paymentName, amount/2, *ack)
            |  // <- concurrent         
            // agent C (Tax Services)
        	processIncomeTax!(paymentId, paymentName, amount/2, *ack)      
        }
        | 
        // agent A (Employer) behaviour : pay
        contract pay(pId, pName, pAmount, @name,@amount) = {
            new Y, H in {
              @"keccak256Hash"!(name.toByteArray(), *Y) 
                |  // <- concurrent key generation and key receiver channel creation
              for (@H <- Y) { // we have a key
              	pId!(H) | pName!(name) | pAmount!(amount) // fullfill the payment (3 processes are triggered concurrently)
                |  // <- concurrent
              	logTransaction!(H, name, amount," << salary payed ! (AGENT A)")
              }
        	}
        } 
        |  
        // agent B (Employee) behaviour : widthdraw
        contract widthdraw(@uri,@name,@amount, result) = {
            new paymentIdLookupResponse in {
              	logTransaction!(uri, name, amount, " << got payment. can widthdraw ! (AGENT B)")
            }
        }
        | 
        // agent B (Employee) behaviour : taxPay
        contract taxPay(@uri,@name,@amount, result) = {
            new taxPaymentOut in {
              	logTransaction!(uri, name, amount, " << tax payed ! (AGENT B)")
            }
        }
        |
        // agent C (Tax Services) behaviour : processIncomeTax
        contract processIncomeTax(@uri,@name,@amount, result) = {
            new taxPaymentIn in {
              	logTransaction!(uri, name, amount, " << tax secured ! (AGENT C)")
            }
        }
    }
}
|  
// myRhobustContractTEST : test rhobustFactory
// This level of recursivity is only needed to simulate a sequential test.
// In real life, agents interact INDEPENDENTLY and sometimes CONCURRENTLY.
new myRhobustContractTEST, ack, stdoutAck(`rho:io:stdoutAck`) in {
  stdoutAck!("TEST : Creating sample rhobust contract. 3 agents (employer, employee, IRS)", *ack)
  |  // <- concurrent (log test start)
  @"rhobustFactory"!(*myRhobustContractTEST, 3)
  |  // <- concurrent (run test)
  for(_ <- ack) {
    myRhobustContractTEST!("Joe", "secretkey_employee", *ack)
    |  // <- concurrent (callback)
    for(res <- ack) {
      stdoutAck!(*res, *ack) 
      |  // <- concurrent (callback)
      for(_ <- ack) {
        myRhobustContractTEST!("irs", "secretkey_irs", *ack)
        |  // <- concurrent (callback)
        for(res <- ack) {
          stdoutAck!(*res, *ack)   
          |  // <- concurrent (callback)
          for(_ <- ack) {
            myRhobustContractTEST!("boss", "secretkey_employer" , *ack) 
            |  // <- concurrent (callback)
            for(res <- ack) {
              stdoutAck!(*res, *ack)   
              |  // <- concurrent (callback)
              for(_ <- ack) {
                myRhobustContractTEST!("Sam", "dummy_key", *ack)
                |  // <- concurrent (callback)
                for(res <- ack) {
                  stdoutAck!(*res, *ack)
                }
              }
            }
          }
        }
      }
    }
  }
}
    