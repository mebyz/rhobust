new MakeMint, NonNegativeNumber, MakeBrandPair, RhoClass in {
contract @[*MakeMint, "int2NN"](@x, return) = {
      new nnCh in {
        NonNegativeNumber!(x, *nnCh) | for(@nn <- nnCh) {
          return!(nn)
        }
      }
    } | 
contract MakeMint(return) = {
      new pairCh, thisMint, internalMakePurse in {
        MakeBrandPair!(*pairCh) | for(@p <- pairCh) {
          match p {
            [seal, unseal] => {
              contract @[*thisMint, "makePurse"](@init, return) = {
                new balanceCh in {
                  @[*MakeMint, "int2NN"]!(init, *balanceCh) | for(@balance <- balanceCh) {
                    internalMakePurse!(balance, *return)
                  }
                }
              } |
              contract internalMakePurse(balance, return) = {
                
                new thisPurse in {
                  contract @[*thisPurse, "decr"](@amount, success) = { balance!("sub", [amount], *success) } |
                  contract @[*thisPurse, "incr"](@amount, success) = { balance!("addd", [amount], *success) } |
                  contract @[*thisPurse, "getBalance"](return) = { balance!("value", [], *return) } |
                  contract @[*thisPurse, "sprout"](return) = { @[*thisMint, "makePurse"]!(0, *return) } |
                  contract @[*thisPurse, "getDecr"](return) = { @seal!([*thisPurse, "decr"], *return) } |
                  contract @[*thisPurse, "deposit"](@amount, src, success) = {
                    new result in {
                      src!("getDecr", [], *result) | for(@sealedSrcDecr <- result) { 
                        @unseal!(sealedSrcDecr, *result) | for(@r <- result) { 
                          match r {
                            [srcDecr] => { 
                              @srcDecr!(amount, *result) | for(@r <- result) { 
                                match r {
                                  true => { 
                                    balance!("add", [amount], *success) 
                                  }
                                  _ => { success!(false) }
                                }
                              }
                            }
                            _ => { success!(false) }
                          }
                        }
                      }
                    }
                  } |
                  contract @[*thisPurse, "directpayment"](@amount, src, success1,success2) = {
                        balance!("dec", [amount], *success1) |
                        src!("incr", [amount], *success2)
                  } |
                  contract @[*thisPurse, "directpay"](@amount, src, success1,success2) = {
                        balance!("dec", [amount], *success1) |
                        src!("add", [amount], *success2)
                  } |
                  contract thisPurse(@method, @input, return) = {
                    @[*RhoClass, "functionApply"]!([*thisPurse, method], input, *return)
                  } |
                  return!(*thisPurse)
                }
              }
            }
          }
        } |
        contract thisMint(@method, @input, return) = {
          @[*RhoClass, "functionApply"]!([*thisMint, method], input, *return)
        } |
        return!(*thisMint)
      }
    } | 
contract NonNegativeNumber(@init, return) = {
      new this, valueStore in {
        contract @[*this, "add"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore){
                valueStore!(v + x) | success!(true)
              }
            }
            _ => { success!(false)  }
          }
        } |
        contract @[*this, "dec"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore){
                valueStore!(v - x) | success!(true)
              }
            }
            _ => { success!(false)  }
          }
        } |
        contract @[*this, "sub"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore) {
                match x <= v {
                  true => {
                    valueStore!(v - x) | success!(true)
                  }
                  _ => { valueStore!(v) | success!(false) }
                }
              }
            }
            _ => { success!(false) }
          }
        } |
        contract @[*this, "addd"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore) {
                match x <= v {
                  true => {
                    valueStore!(v + x) | success!(true)
                  }
                  _ => { valueStore!(v) | success!(false) }
                }
              }
            }
            _ => { success!(false) }
          }
        } |
        contract @[*this, "value"](return) = {
          for(@v <- valueStore) {
            valueStore!(v) | return!(v)
          }
        } |
        contract this(@method, @input, return) = {
          @[*RhoClass, "functionApply"]!([*this, method], input, *return)
        } |
        return!(*this) |
        match init >= 0 {
          true => { valueStore!(init) }
          _ => { valueStore!(0) } 
        }
      }
    } | 
contract MakeBrandPair(return) = {
    new seal, unseal, key in {
      contract seal(@data, return) = {
        new sealedData in {
          contract sealedData(@input, return) = {
            match input == *key {
              true => { return!([data]) }
              _ => { return!([]) }
            }
          } |
          return!(*sealedData)
        }
      } |
      contract unseal(sealedData, return) = { sealedData!(*key, *return) } |
      return!([*seal, *unseal])
    }
  } | 
contract @[*RhoClass, "apply"](name, @args) = {
    match args {
      [a]                => { name!(a) }
      [a, b]             => { name!(a, b) }
      [a, b, c]          => { name!(a, b, c) }
      [a, b, c, d]       => { name!(a, b, c, d) }
      [a, b, c, d, e]    => { name!(a, b, c, d, e) }
      [a, b, c, d, e, f] => { name!(a, b, c, d, e, f) }
      _                  => { name!(args) }
    }
  } | 
contract @[*RhoClass, "functionApply"](name, @input, return) = {
    match input {
      []                 => { name!(*return) }
      [a]                => { name!(a, *return) }
      [a, b]             => { name!(a, b, *return) }
      [a, b, c]          => { name!(a, b, c, *return) }
      [a, b, c, d]       => { name!(a, b, c, d, *return) }
      [a, b, c, d, e]    => { name!(a, b, c, d, e, *return) }
      [a, b, c, d, e, f] => { name!(a, b, c, d, e, f, *return) }
      _                  => { name!(input, *return) }
    }
  } | 
new myRhobustContractTEST, myRhobustContract_Joe , myRhobustContract_Irs , myRhobustContract_Boss, ack, stdout(`rho:io:stdout`), stdoutAck(`rho:io:stdoutAck`),
ackJoe, resJoe, 
ackIrs, resIrs, 
ackBoss, resBoss,
resProc_Joe,ackProc_Joe,
resProc_Irs,ackProc_Irs,
resProc_Boss,ackProc_Boss,
aliceWalletBalance,bobWalletBalance,
getMintA,getMintB,getMintC, getPurseA,getPurseB,getPurseC,getBalanceA,getBalanceAB,getBalanceB,getBalanceC,ccDep1 ,ccDep2,ackBoss2 in {
stdout!("TEST STEP 1 : Creating sample rhobust contract") | 
@"RhobustFactory"!(*myRhobustContractTEST, 3, *ack) | 
for(@uri2 <- ack) {
            MakeMint!(*getMintA) | 
            MakeMint!(*getMintB) | 
            MakeMint!(*getMintC) | 
            for(@mintJoe <- getMintA;@mintBoss <- getMintB;@mintIrs <- getMintC) {
                @[mintJoe, "makePurse"]!(101, *getPurseA) |
                @[mintBoss, "makePurse"]!(102, *getPurseB) |
                @[mintIrs, "makePurse"]!(103, *getPurseC) |
                for (@purseJoe <- getPurseA;@purseBoss <- getPurseB;@purseIrs <- getPurseC) {
                    
                    
                    
                    
                    
                    
                    
                    
                    @"RhobustFactory"!(*myRhobustContract_Joe, uri2,"sign", "Joe","secretkey_employee", *ackJoe) |
                    for(resJoe <- ackJoe) {
                        stdout!(*resJoe) |
                        @[purseJoe, "getBalance"]!(*getBalanceA)
                        | for(@balanceJoe <- getBalanceA) {
                            stdout!(["Joe", balanceJoe])
                        } | 
                        
                        
                        
                        @"RhobustFactory"!(*myRhobustContract_Irs, uri2,"sign",  "irs","secretkey_irs", *ackIrs) |
                        for(resIrs <- ackIrs) {
                            stdout!(*resIrs) |
                            @[purseIrs, "getBalance"]!(*getBalanceA)
                            | for(@balanceIrs <- getBalanceA) {
                                stdout!(["irs", balanceIrs])
                            } | 
                                
                                
                                
                            
                            
                            
                            @"RhobustFactory"!(*myRhobustContract_Boss, uri2,"sign",  "boss","secretkey_employer", *ackBoss) |
                            for(resBoss <- ackBoss){
                                
                                @"RhobustFactory"!(*myRhobustContract_Boss, uri2,"pay",  "boss","secretkey_employer", 100, *ackBoss2) |
                                for(resBoss2 <- ackBoss2){
                                    stdout!(*resBoss2) |
                                    @[purseBoss, "getBalance"]!(*getBalanceA)
                                    | for(@balanceBoss <- getBalanceA) {
                                        stdout!(["boss", balanceBoss]) |
                                        @[purseBoss, "directpayment"]!(100, purseJoe, *ccDep1, *ccDep2) |
                                        for(@r <- ccDep1;@r2 <- ccDep2) {
                                            
                                            
                                            match r {
                                                true => { 
                                                    match r2 {
                                                        true => { 
                                                            @[purseBoss, "getBalance"]!(*getBalanceB)
                                                            | for(@balanceBoss <- getBalanceB) {
                                                                stdout!(["boss++", balanceBoss])
                                                            }
                                                            |
                                                            @[purseJoe, "getBalance"]!(*getBalanceA)
                                                            | for(@balanceJoe <- getBalanceA) {
                                                                stdout!(["Joe++", balanceJoe])
                                                            }
                                                        }
                                                    } 
                                                    
                                                }
                                            } 
                                        }
                                    }                                 
                                }
                            }
                        }
                    }
                } 
                /*@[minta, "makePurse"]!(101, *getPurseA)
                | for (@pursea <- getPurseA) {
                    @[pursea, "getBalance"]!(*getBalanceA)
                    | for(@balancea <- getBalanceA) {
                        stdout!(["A", balancea])
                        |
                        @[mintb, "makePurse"]!(102, *getPurseB)
                        | for (@purseb <- getPurseB) {
                            @[purseb, "getBalance"]!(*getBalanceB)
                            | for(@balanceb <- getBalanceB) {
                                stdout!(["B", balanceb]) |
                                @[purseb, "directpayment"]!(10, pursea, *ccDep1, *ccDep2) |
                                for(@r <- ccDep1;@r2 <- ccDep2) {
                                    
                                    
                                    
                                    match r {
                                        true => { 
                                        @[pursea, "getBalance"]!(*getBalanceA)
                                        | for(@balancea <- getBalanceA) {
                                            stdout!(["A'", balancea])
                                        }
                                        }
                                    } |
                                    match r2 {
                                        true => { 
                                        @[purseb, "getBalance"]!(*getBalanceB)
                                        | for(@balanceb <- getBalanceB) {
                                            stdout!(["B'", balanceb])
                                        }
                                        }
                                    } 
                                    
                                } |
                                @[mintc, "makePurse"]!(103, *getPurseC)
                                | for (@pursec <- getPurseC) {
                                    @[pursec, "getBalance"]!(*getBalanceC)
                                    | for(@balancec <- getBalanceC) {
                                        stdout!(["C'", balancec]) 
                                    }
                                    
                                }
                            }                    
                        }
                    } 
                }*/
            }
        }
} | 
new
stdout(`rho:io:stdout`),
ri(`rho:registry:insertArbitrary`), 
rl(`rho:registry:lookup`),
stdoutAck(`rho:io:stdoutAck`),
RhobustContract,
Object, 
contractCh,
ackContract,  
ackInfo,resInfo,
ackRegister,
resRegister,
ackRl,resRl,
ack, ackContractCh,
pay, ackPay,
invoiceId, invoiceAmount, invoiceName, 
processIncomeTax, widthdraw, taxPay, 
logResolve, 
uriChan, uriChan2, uri2,
logTransaction,
agentType,secretKey,
ackwithdraw,acktaxPay,ackprocessIncomeTax,
RhobustContractSign,ackRhobustContractSign,
RhobustContractPay,ackRhobustContractPay
in {
    contract @"RhobustFactory"(rhobustCreation, @n, result) = {
        new 
        ri(`rho:registry:insertArbitrary`), 
        rl(`rho:registry:lookup`) in {
        
        ri!(bundle+{*RhobustContract}  , *uriChan) |
        for(@uri <- uriChan) {
            
            rl!(uri, *contractCh) |
            for( ct <- contractCh) {
                ct!("new",[{"contract_id": uri, "data": true},*ackContract]) |
                for ( myContract <- ackContract) { 
                    
                    ri!(bundle+{*myContract}  , *uriChan2) |
                    for(@uri2 <- uriChan2) {
                        
                        result!(uri2)
                    }
                }
            }
        }
        }
    } |
    contract @"RhobustFactory"(rhobustLookup, @uri, @action, @name, @key, resultLookup) = {
        
        rl!(uri, *contractCh) |
        for( ct <- contractCh) {
            RhobustContractSign!(name, key, *ackRhobustContractSign) |
            for(@resRhobustContractSign <- ackRhobustContractSign) {
                resultLookup!(resRhobustContractSign)
            }
        }
    } | 
    contract @"RhobustFactory"(rhobustLookup, @uri, @action, @name, @key,@amount, resultLookup) = {
        
        rl!(uri, *contractCh) |
        for( ct <- contractCh) {
            RhobustContractPay!(name, key, amount, *ackRhobustContractPay) |
            for(@resRhobustContractPay <- ackRhobustContractPay) {
                resultLookup!(resRhobustContractPay)
            }
        }
    }
    
     |
    
    
    contract RhobustContract(@"new", @[
        propsMap,
        *return]) = { 
            new instance, ret in {
            stdout!(["new",{"props": propsMap}, *instance]) |
            Object!(*RhobustContract, *instance, *ret) |
            for ( @object <- ret ) {
                instance!({"object": object, "contract": bundle+{*RhobustContract}, "props": propsMap }) |
                return!(object)
            }
        }
    } |
    
    contract RhobustContract(this, @"get", @[name, *value]) = {
        for (@nod <- this) {
            this!(nod) |
            value!(nod.get("props").get(name))
        }
    } |
    
    contract RhobustContract(this, @"set", @[name, value, *ack]) = {
        for (@nod <- this) {
            this!(nod.set("props",nod.get("props").set(name,value))) |
            ack!(Nil)
        }
    } |
    
    contract RhobustContractPay(@agentType, @secretKey, @amount, ackSign) = {
    
        if (agentType == "boss" and secretKey == "secretkey_employer") {
            
            pay!(*invoiceId, *invoiceName, *invoiceAmount, "Joe", amount ,"Hello " ++ agentType ++ " you just paid Joe. transaction fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackPay)
            |
            for (@hs<- ackPay) {
                ackSign!(hs)
            }
        }
    } |
    
    contract RhobustContractSign(@agentType, @secretKey, ackSign) = {
    
        if (agentType == "boss" and secretKey == "secretkey_employer") {
            
            /*pay!(*invoiceId, *invoiceName, *invoiceAmount, "Joe", 100,"Hello " ++ agentType ++ " you just paid Joe. transaction fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackPay)
            |
            for (@hs<- ackPay) {
                ackSign!(hs)
            }*/
            logResolve!("Hello " ++ agentType ++ ", you will pay soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        
        } else 
        if (agentType == "Joe" and secretKey == "secretkey_employee") {
            
            logResolve!("Hello " ++ agentType ++ ", you will get payed soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        }  else 
        if (agentType == "irs" and secretKey == "secretkey_irs") {
            
            logResolve!("Hello " ++ agentType ++ ", tax income will be transfered soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        } else {
            
        }
    } |
    
    
    contract RhobustContract(this, @"register", @[*ret]) = {
        new RhobustContractChan, uriChan in {
            for( @RhobustContract <- this) {
                if (RhobustContract.get("uri") != Nil ) {
                    stdout!(["RhobustContract",RhobustContract.get("uri")]) |
                    ret!(RhobustContract.get("uri")) |
                    this!(RhobustContract)
                } else {
                    ri!(*this, *uriChan) |
                    for(@uri <- uriChan) {
                        stdout!(["RhobustContract",uri]) |
                        this!(RhobustContract.set("uri",uri)) |
                        ret!(uri)
                    }
                }
            }
        }
    } | 
    
    
    contract Object(class, @instance, ret) = {
        new this in {
            ret!(bundle+{*this}) |
            
            contract this(@method, args) = {
                class!(instance, method, *args)
            }
        }
    } |
    
    
    contract logResolve(@message, cb) = {
        cb!(message)
    } |
    
    
    contract logTransaction(@tid,@action,@nameWorker,@nameCurrentAgent,@amount,@message)= {
        stdout!(["transaction id:",tid,"action:",action,"nameCurrentAgent:",nameCurrentAgent,"amount:",amount,"message:",message])
    } |
    
    contract pay(pId, pName, pAmount, @name,@amount,@message, ackEnd) = {
        new Y, H in {
        
        @"keccak256Hash"!(name.toByteArray(), *Y) 
            |  
        for (@H <- Y) { 
            logTransaction!(H, "payment", name, "employer", amount," << salary payed ! (AGENT A)")
            | 
            
            pId!(H) | pName!(name) | pAmount!(amount) |
            ackEnd!([H,message,name,amount]) |
            
            
            for(@paymentId <- invoiceId;@paymentName <- invoiceName;@amount <- invoiceAmount) {
                
                
                
                widthdraw!(paymentId, paymentName, amount/2, *ackwithdraw) |
                for(@wd <- ackwithdraw) {
                    stdout!(wd)
                }
                |  
                
                taxPay!(paymentId, paymentName, amount/2, *acktaxPay) |
                for(@tp <- acktaxPay) {
                    stdout!(tp)
                }
                |  
                
                processIncomeTax!(paymentId, paymentName, amount/2, *ackprocessIncomeTax) |
                for(@it <- ackprocessIncomeTax) {
                    stdout!(it)
                }  
            }
        }
            }
    } |
    
    contract widthdraw(@uri,@name,@amount, result_widthdraw) = {
        new paymentIdLookupResponse in {
            
            logTransaction!(uri, "withdraw", name, "employee", amount, " << got payment. can widthdraw ! (AGENT B)") |
            result_widthdraw!("ok_withdraw")
        }
    }|
    
    contract taxPay(@uri,@name,@amount, result_taxPay) = {
        new taxPaymentOut in {
            
            logTransaction!(uri, "tax_payment", name, "employee", amount, " << tax payed ! (AGENT B)") |
            result_taxPay!("ok_taxpay")
        }
    }|
    
    contract processIncomeTax(@uri,@name,@amount, result_processIncomeTax) = {
        new taxPaymentIn in {
            
            logTransaction!(uri, "tax_income", name, "IRS", amount, " << tax secured ! (AGENT C)") |
            result_processIncomeTax!("ok_processtax")
        }
    }
}
}
