new NonNegativeNumber, RhoClass, LinkedList, MakeMint, MakeBrandPair, TestSet in {
contract NonNegativeNumber(@init, return) = {
      new this, valueStore in {
        contract @[*this, "add"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore){
                valueStore!(v + x) | success!(true)
              }
            }
            _ => { success!(false)  }
          }
        } |
        contract @[*this, "sub"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore) {
                match x <= v {
                  true => {
                    valueStore!(v - x) | success!(true)
                  }
                  _ => { valueStore!(v) | success!(false) }
                }
              }
            }
            _ => { success!(false) }
          }
        } |
        contract @[*this, "value"](return) = {
          for(@v <- valueStore) {
            valueStore!(v) | return!(v)
          }
        } |
        contract this(@method, @input, return) = {
          @[*RhoClass, "functionApply"]!([*this, method], input, *return)
        } |
        return!(*this) |
        match init >= 0 {
          true => { valueStore!(init) }
          _ => { valueStore!(0) } 
        }
      }
    } | 
contract @[*RhoClass, "apply"](name, @args) = {
    match args {
      [a]                => { name!(a) }
      [a, b]             => { name!(a, b) }
      [a, b, c]          => { name!(a, b, c) }
      [a, b, c, d]       => { name!(a, b, c, d) }
      [a, b, c, d, e]    => { name!(a, b, c, d, e) }
      [a, b, c, d, e, f] => { name!(a, b, c, d, e, f) }
      _                  => { name!(args) }
    }
  } | 
contract @[*RhoClass, "functionApply"](name, @input, return) = {
    match input {
      []                 => { name!(*return) }
      [a]                => { name!(a, *return) }
      [a, b]             => { name!(a, b, *return) }
      [a, b, c]          => { name!(a, b, c, *return) }
      [a, b, c, d]       => { name!(a, b, c, d, *return) }
      [a, b, c, d, e]    => { name!(a, b, c, d, e, *return) }
      [a, b, c, d, e, f] => { name!(a, b, c, d, e, f, *return) }
      _                  => { name!(input, *return) }
    }
  } | 
contract @[*LinkedList, "head"](@list, return) = {
    match list {
      [head, _] => { return!(head) }
      _ => { return!(Nil) }
    }
  } | 
contract @[*LinkedList, "tail"](@list, return) = {
    match list {
      [_, tail] => { return!(tail) }
      _ => { return!(Nil) }
    }
  } | 
contract @[*LinkedList, "prepend"](@value, @tail, return) = {
    return!([value, tail])
  } | 
contract @[*LinkedList, "partialFold"](@list, @start, combinatorAndCondition, return) = {
    new loop in {
      contract loop(@accumulatedValue, @lst) = {
        match lst {
          [head, tail] => {
            new result in {
              combinatorAndCondition!(head, accumulatedValue, *result) |
              for (@r <- result) {
                match r {
                  [true, _] => { return!(r) }
                  [false, newValue] => { loop!(newValue, tail) }
                }
              }
            }
          }
          _ => { return!([false, accumulatedValue]) }
        }
      } | loop!(start, list)
    }
  } | 
contract @[*LinkedList, "fold"](@list, @start, combinator, return) = {
    new combinatorAndCondition in {
      contract combinatorAndCondition(@head, @accumulatedValue, return) = {
        new result in {
          combinator!(head, accumulatedValue, *result) |
          for(@r <- result){ return!([false, r]) }
        }
      } |
      new result in {
        @[*LinkedList, "partialFold"]!(list, start, *combinatorAndCondition, *result) |
        for(@r <- result) {
          match r { [_, v] => { return!(v) } }
        }
      }
    }
  } | 
contract @[*LinkedList, "reverse"](@list, return) = {
    new combinator in {
      contract combinator(@head, @accumulatedValue, return) = {
        @[*LinkedList, "prepend"]!(head, accumulatedValue, *return)
      } | @[*LinkedList, "fold"]!(list, [], *combinator, *return)
    }
  } | 
contract @[*LinkedList, "map"](@list, function, return) = {
    new combinator in {
      contract combinator(@head, @accumulatedValue, return) = {
        new mappedHead in {
          function!(head, *mappedHead) |
          for(@x <- mappedHead) {
            @[*LinkedList, "prepend"]!(x, accumulatedValue, *return)
          }
        }
      } | new reversedMappedList in {
        @[*LinkedList, "fold"]!(list, [], *combinator, *reversedMappedList) |
        for (@rml <- reversedMappedList) {
          @[*LinkedList, "reverse"]!(rml, *return)
        }
      }
    }
  } | 
contract @[*LinkedList, "foreach"](@list, proc, isDone) = {
    new combinator, nilReturn in {
      contract combinator(@head, @accumulatedValue, return) = {
        
        new isDone in { proc!(head, *isDone) | for(_ <- isDone){ return!(Nil) } }
      } | 
      @[*LinkedList, "fold"]!(list, Nil, *combinator, *nilReturn) | for(_ <- nilReturn){ isDone!(true) }
    }
  } | 
contract @[*LinkedList, "get"](@list, @index, return) = {
    new combinatorAndCondition in {
      contract combinatorAndCondition(@head, @accumulatedValue, return) = {
        match accumulatedValue {
          [i, _] => { return!([i == index, [i + 1, head]]) }
        }
      } |
      new result in {
        @[*LinkedList, "partialFold"]!(list, [0, Nil], *combinatorAndCondition, *result) |
        for(@r <- result) {
          match r {
            [true, [_, v]] => { return!(v) }
            _ => { return!(Nil) } 
          }
        }
      }
    }
  } | 
contract @[*LinkedList, "indexOf"](@list, @value, return) = {
    new combinatorAndCondition in {
      contract combinatorAndCondition(@head, @accumulatedValue, return) = {
        return!([head == value, accumulatedValue + 1])
      } |
      new result in {
        @[*LinkedList, "partialFold"]!(list, -1, *combinatorAndCondition, *result) |
        for(@r <- result) {
          match r {
            [true, i] => { return!(i) }
            _ => { return!(-1) } 
          }
        }
      }
    }
  } | 
contract @[*LinkedList, "length"](@list, return) = {
    new combinator in {
      contract combinator(@head, @accumulatedValue, return) = {
        return!(accumulatedValue + 1)
      } | 
      @[*LinkedList, "fold"]!(list, 0, *combinator, *return)
    }
  } | 
contract @[*LinkedList, "zip"](@list1, @list2, return) = {
    new loop in {
      contract loop(@pair, @acc, return) = {
        match pair {
          [[h1, t1], [h2, t2]] => {
            loop!([t1, t2], [[h1, h2], acc], *return)
          }
          _ => {
            return!(acc)
          }
        }
      } |
      new zippedCh in {
        loop!([list1, list2], [], *zippedCh) |
        for(@zipped <- zippedCh){ @[*LinkedList, "reverse"]!(zipped, *return) }
      }
    }
  } | 
contract @[*LinkedList, "range"](@start, @end, return) = {
    new loop in {
      contract loop(@i, @list) = {
        match i < start {
          true => { return!(list) } 
          _ => {
            loop!(i - 1, [i, list])
          }
        }
      } | loop!(end - 1, [])
    }
  } | 
contract @[*LinkedList, "fromSmallList"](@list, return) = {
    match list {
      []                          => { return!([]) }
      [a]                         => { return!([a, []]) }
      [a, b]                      => { return!([a, [b, []]]) }
      [a, b, c]                   => { return!([a, [b, [c, []]]]) }
      [a, b, c, d]                => { return!([a, [b, [c, [d, []]]]]) }
      [a, b, c, d, e]             => { return!([a, [b, [c, [d, [e, []]]]]]) }
      [a, b, c, d, e, f]          => { return!([a, [b, [c, [d, [e, [f, []]]]]]]) }
      [a, b, c, d, e, f, g]       => { return!([a, [b, [c, [d, [e, [f, [g, []]]]]]]]) }
      [a, b, c, d, e, f, g, h]    => { return!([a, [b, [c, [d, [e, [f, [g, [h, []]]]]]]]]) }
      [a, b, c, d, e, f, g, h, i] => { return!([a, [b, [c, [d, [e, [f, [g, [h, [i, []]]]]]]]]]) }
      _ => { return!("Error! List too long for conversion to linked list.") }
    }
  } | 
contract @[*LinkedList, "toSmallList"](@linkedList, return) = {
    match linkedList {
      []                                              => { return!([]) }
      [a, []]                                         => { return!([a]) }
      [a, [b, []]]                                    => { return!([a, b]) }
      [a, [b, [c, []]]]                               => { return!([a, b, c]) }
      [a, [b, [c, [d, []]]]]                          => { return!([a, b, c, d]) }
      [a, [b, [c, [d, [e, []]]]]]                     => { return!([a, b, c, d, e]) }
      [a, [b, [c, [d, [e, [f, []]]]]]]                => { return!([a, b, c, d, e, f]) }
      [a, [b, [c, [d, [e, [f, [g, []]]]]]]]           => { return!([a, b, c, d, e, f, g]) }
      [a, [b, [c, [d, [e, [f, [g, [h, []]]]]]]]]      => { return!([a, b, c, d, e, f, g, h]) }
      [a, [b, [c, [d, [e, [f, [g, [h, [i, []]]]]]]]]] => { return!([a, b, c, d, e, f, g, h, i]) }
      _ => { return!("Error! LinkedList too long for conversion to list.") }
    }
  } | 
contract LinkedList(@method, @input, return) = {
      @[*RhoClass, "functionApply"]!([*LinkedList, method], input, *return)
    } | 
contract @[*MakeMint, "int2NN"](@x, return) = {
      new nnCh in {
        NonNegativeNumber!(x, *nnCh) | for(@nn <- nnCh) {
          return!(nn)
        }
      }
    } | 
contract MakeMint(return) = {
      new pairCh, thisMint, internalMakePurse in {
        MakeBrandPair!(*pairCh) | for(@p <- pairCh) {
          match p {
            [seal, unseal] => {
              contract @[*thisMint, "makePurse"](@init, return) = {
                new balanceCh in {
                  @[*MakeMint, "int2NN"]!(init, *balanceCh) | for(@balance <- balanceCh) {
                    internalMakePurse!(balance, *return)
                  }
                }
              } |
              contract internalMakePurse(balance, return) = {
                
                new thisPurse in {
                  contract @[*thisPurse, "decr"](@amount, success) = { balance!("sub", [amount], *success) } |
                  contract @[*thisPurse, "getBalance"](return) = { balance!("value", [], *return) } |
                  contract @[*thisPurse, "sprout"](return) = { @[*thisMint, "makePurse"]!(0, *return) } |
                  contract @[*thisPurse, "getDecr"](return) = { @seal!([*thisPurse, "decr"], *return) } |
                  contract @[*thisPurse, "deposit"](@amount, src, success) = {
                    new result in {
                      src!("getDecr", [], *result) | for(@sealedSrcDecr <- result) { 
                        @unseal!(sealedSrcDecr, *result) | for(@r <- result) { 
                          match r {
                            [srcDecr] => { 
                              @srcDecr!(amount, *result) | for(@r <- result) { 
                                match r {
                                  true => { 
                                    balance!("add", [amount], *success) 
                                  }
                                  _ => { success!(false) }
                                }
                              }
                            }
                            _ => { success!(false) }
                          }
                        }
                      }
                    }
                  } |
                  contract thisPurse(@method, @input, return) = {
                    @[*RhoClass, "functionApply"]!([*thisPurse, method], input, *return)
                  } |
                  return!(*thisPurse)
                }
              }
            }
          }
        } |
        contract thisMint(@method, @input, return) = {
          @[*RhoClass, "functionApply"]!([*thisMint, method], input, *return)
        } |
        return!(*thisMint)
      }
    } | 
contract MakeBrandPair(return) = {
    new seal, unseal, key in {
      contract seal(@data, return) = {
        new sealedData in {
          contract sealedData(@input, return) = {
            match input == *key {
              true => { return!([data]) }
              _ => { return!([]) }
            }
          } |
          return!(*sealedData)
        }
      } |
      contract unseal(sealedData, return) = { sealedData!(*key, *return) } |
      return!([*seal, *unseal])
    }
  } | 
contract TestSet(desc, @tests) = {
      new addTests, execTests, testsCh in {
        contract execTests(return) = {
          new combinator in {
            contract combinator(head, @accumulatedValue, return) = {
              new result in {
                head!(*result) |
                for(@r <- result) {
                  match [r, accumulatedValue] {
                    [true, true] => return!(true)
                    _            => return!(false)
                  }
                }
              }
            } |
            for(@tests <- testsCh) {
              LinkedList!("fold", [tests, true, *combinator], *return)
            }
          }
        } |
        contract addTests(@tests) = {
          new toContract, linkedListCh, rListCh in {
            contract toContract(@test, return) = {
              match test {
                [class, function, input, answer] => {
                  new tContract in {
                    contract tContract(return) = {
                      new result in {
                        @class!(function, input, *result) | for(@r <- result) {
                          return!(r == answer)
                        }
                      }
                    } |
                    return!(*tContract)
                  }
                }
              }
            } |
            
            LinkedList!("fromSmallList", [tests], *linkedListCh) |
            for(@linkedList <- linkedListCh) {
              LinkedList!("map", [linkedList, *toContract], *testsCh)
            }
          }
        } |
        addTests!(tests) |
        execTests!(*desc)
      }
    } | 
contract @[*TestSet, "after"](desc, continuation) = {
      for(@result <- desc) {
        match result {
          true => {
            desc!(true) | { *continuation }
          }
          _ => {
            desc!(false)
          }
        }
      }
    } | 
new myRhobustContractTEST, ack, stdoutAck(`rho:io:stdoutAck`),
ackJoe, resJoe, 
ackIrs, resIrs, 
ackBoss, resBoss,
resProc_Joe,ackProc_Joe,
resProc_Irs,ackProc_Irs,
resProc_Boss,ackProc_Boss in {
MakeMint!("mintA") | 
MakeMint!("mintB") | 
 | 
for(mintA <- @"mintA"; mintB <- @"mintB") {
    mintA!("makePurse", [100], "aliceAPurse") | mintB!("makePurse", [50], "bobBPurse") |
    for(@aliceAPurse <- @"aliceAPurse"; @bobBPurse <- @"bobBPurse") {
      TestSet!(
        "Purses should be created with the given balance.",
        [
          [aliceAPurse, "getBalance", [], 100],
          [bobBPurse, "getBalance", [], 50]
        ]
      ) |
      @[*TestSet, "after"]!("Purses should be created with the given balance.", {
        TestSet!( 
          "Cross-currency deposits should fail.",
          [
            [aliceAPurse, "deposit", [10, bobBPurse], false],
            [bobBPurse, "deposit", [10, aliceAPurse], false],
          ]
        )
      }) |
      @[*TestSet, "after"]!("Cross-currency deposits should fail.", {
        @aliceAPurse!("sprout", [], "bobAPurse") |
        @bobBPurse!("sprout", [], "aliceBPurse") |
        for(@aliceBPurse <- @"aliceBPurse"; @bobAPurse <- @"bobAPurse") {
          TestSet!(
            "Deposit should work as expected.",
            [
              [aliceBPurse, "deposit", [10, bobBPurse], true], 
              [aliceBPurse, "getBalance", [], 10], 
              [bobBPurse, "getBalance", [], 40], 
              
              [bobAPurse, "deposit", [20, aliceAPurse], true], 
              [bobAPurse, "getBalance", [], 20], 
              [aliceAPurse, "getBalance", [], 80], 
              
              [bobAPurse, "deposit", [30, aliceAPurse], true], 
              [bobAPurse, "getBalance", [], 50], 
              [aliceAPurse, "getBalance", [], 50], 
            ]
          )
        }
      })
    }
  } | 
stdoutAck!("TEST : Creating sample rhobust contract. 3 agents (employer, employee, IRS)", *ack) | 
new myRhobustContractTEST, myRhobustContract_Joe , myRhobustContract_Irs , myRhobustContract_Boss, ack,
    stdout(`rho:io:stdout`), stdoutAck(`rho:io:stdoutAck`) in {
stdout!("TEST STEP 1 : Creating sample rhobust contract") | 
@"RhobustFactory"!(*myRhobustContractTEST, 3, *ack) | 
for(@uri2 <- ack) {
        
        
        
        
        
        
        
        
        @"RhobustFactory"!(*myRhobustContract_Joe, uri2,"sign", "Joe","secretkey_employee", *ackJoe) |
        for(resJoe <- ackJoe) {
            stdout!(*resJoe) |
        
                
            
            
            
            @"RhobustFactory"!(*myRhobustContract_Irs, uri2,"sign",  "irs","secretkey_irs", *ackIrs) |
            for(resIrs <- ackIrs) {
                stdout!(*resIrs) | 
                    
                    
                    
                
                
                @"RhobustFactory"!(*myRhobustContract_Boss, uri2,"sign",  "boss","secretkey_employer", *ackBoss) |
                for(resBoss <- ackBoss){
                    stdout!(*resBoss) 
                    
                    
                    
                    
                    }
                }
            }
        }
}
} | 
new
stdout(`rho:io:stdout`),
ri(`rho:registry:insertArbitrary`), 
rl(`rho:registry:lookup`),
stdoutAck(`rho:io:stdoutAck`),
RhobustContract,
Object, 
contractCh,
ackContract,  
ackInfo,resInfo,
ackRegister,
resRegister,
ackRl,resRl,
ack, ackContractCh,
pay, ackPay,
invoiceId, invoiceAmount, invoiceName, 
processIncomeTax, widthdraw, taxPay, 
logResolve, 
uriChan, uriChan2, uri2,
logTransaction,
agentType,secretKey,
ackwithdraw,acktaxPay,ackprocessIncomeTax,
RhobustContractSign,ackRhobustContractSign
in {
    contract @"RhobustFactory"(rhobustCreation, @n, result) = {
        new 
        ri(`rho:registry:insertArbitrary`), 
        rl(`rho:registry:lookup`) in {
        
        ri!(bundle+{*RhobustContract}  , *uriChan) |
        for(@uri <- uriChan) {
            
            rl!(uri, *contractCh) |
            for( ct <- contractCh) {
                ct!("new",[{"contract_id": uri, "data": true},*ackContract]) |
                for ( myContract <- ackContract) { 
                    
                    ri!(bundle+{*myContract}  , *uriChan2) |
                    for(@uri2 <- uriChan2) {
                        
                        result!(uri2)
                    }
                }
            }
        }
        }
    } |
    contract @"RhobustFactory"(rhobustLookup, @uri, @action, @name, @key, resultLookup) = {
        rl!(uri, *ackContractCh) |
        for( ctInstance <- ackContractCh) {
            ctInstance!(name, key, *ackRhobustContractSign) | 
            for(@resRhobustContractSign <- ackRhobustContractSign) {
                resultLookup!(resRhobustContractSign)
            }
        }
    } |
    
    
    contract RhobustContract(@"new", @[
        propsMap,
        *return]) = { 
            new instance, ret in {
            stdout!(["new",{"props": propsMap}, *instance]) |
            Object!(*RhobustContract, *instance, *ret) |
            for ( @object <- ret ) {
                instance!({"object": object, "contract": bundle+{*RhobustContract}, "props": propsMap }) |
                return!(object)
            }
        }
    } |
    
    contract RhobustContract(this, @"get", @[name, *value]) = {
        for (@nod <- this) {
            this!(nod) |
            value!(nod.get("props").get(name))
        }
    } |
    
    contract RhobustContract(this, @"set", @[name, value, *ack]) = {
        for (@nod <- this) {
            this!(nod.set("props",nod.get("props").set(name,value))) |
            ack!(Nil)
        }
    } |
    
    contract RhobustContractSign(@agentType, @secretKey, ackSign) = {
    
        if (agentType == "boss" and secretKey == "secretkey_employer") {
            
            pay!(*invoiceId, *invoiceName, *invoiceAmount, "Joe", 100,"Hello " ++ agentType ++ " you just paid Joe. transaction fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackPay)
            |
            for (@hs<- ackPay) {
                ackSign!(hs)
            }
        } else 
        if (agentType == "Joe" and secretKey == "secretkey_employee") {
            
            logResolve!("Hello " ++ agentType ++ ", you will get payed soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        }  else 
        if (agentType == "irs" and secretKey == "secretkey_irs") {
            
            logResolve!("Hello " ++ agentType ++ ", tax income will be transfered soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        } else {
            
        }
    } |
    
    
    contract RhobustContract(this, @"register", @[*ret]) = {
        new RhobustContractChan, uriChan in {
            for( @RhobustContract <- this) {
                if (RhobustContract.get("uri") != Nil ) {
                    stdout!(["RhobustContract",RhobustContract.get("uri")]) |
                    ret!(RhobustContract.get("uri")) |
                    this!(RhobustContract)
                } else {
                    ri!(*this, *uriChan) |
                    for(@uri <- uriChan) {
                        stdout!(["RhobustContract",uri]) |
                        this!(RhobustContract.set("uri",uri)) |
                        ret!(uri)
                    }
                }
            }
        }
    } | 
    
    
    contract Object(class, @instance, ret) = {
        new this in {
            ret!(bundle+{*this}) |
            
            contract this(@method, args) = {
                class!(instance, method, *args)
            }
        }
    } |
    
    
    contract logResolve(@message, cb) = {
        cb!(message)
    } |
    
    
    contract logTransaction(@tid,@action,@nameWorker,@nameCurrentAgent,@amount,@message)= {
        stdout!(["transaction id:",tid,"action:",action,"nameCurrentAgent:",nameCurrentAgent,"amount:",amount,"message:",message])
    } |
    
    contract pay(pId, pName, pAmount, @name,@amount,@message, ackEnd) = {
        new Y, H in {
        
        @"keccak256Hash"!(name.toByteArray(), *Y) 
            |  
        for (@H <- Y) { 
            logTransaction!(H, "payment", name, "employer", amount," << salary payed ! (AGENT A)")
            | 
            
            pId!(H) | pName!(name) | pAmount!(amount) |
            ackEnd!([H,message,name,amount]) |
            
            
            for(@paymentId <- invoiceId;@paymentName <- invoiceName;@amount <- invoiceAmount) {
                
                
                
                widthdraw!(paymentId, paymentName, amount/2, *ackwithdraw) |
                for(@wd <- ackwithdraw) {
                    stdout!(wd)
                }
                |  
                
                taxPay!(paymentId, paymentName, amount/2, *acktaxPay) |
                for(@tp <- acktaxPay) {
                    stdout!(tp)
                }
                |  
                
                processIncomeTax!(paymentId, paymentName, amount/2, *ackprocessIncomeTax) |
                for(@it <- ackprocessIncomeTax) {
                    stdout!(it)
                }  
            }
        }
            }
    } |
    
    contract widthdraw(@uri,@name,@amount, result_widthdraw) = {
        new paymentIdLookupResponse in {
            
            logTransaction!(uri, "withdraw", name, "employee", amount, " << got payment. can widthdraw ! (AGENT B)") |
            result_widthdraw!("ok_withdraw")
        }
    }|
    
    contract taxPay(@uri,@name,@amount, result_taxPay) = {
        new taxPaymentOut in {
            
            logTransaction!(uri, "tax_payment", name, "employee", amount, " << tax payed ! (AGENT B)") |
            result_taxPay!("ok_taxpay")
        }
    }|
    
    contract processIncomeTax(@uri,@name,@amount, result_processIncomeTax) = {
        new taxPaymentIn in {
            
            logTransaction!(uri, "tax_income", name, "IRS", amount, " << tax secured ! (AGENT C)") |
            result_processIncomeTax!("ok_processtax")
        }
    }
}
}
}
