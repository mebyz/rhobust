new MakeMint, NonNegativeNumber, MakeBrandPair, RhoClass in {
contract @[*MakeMint, "int2NN"](@x, return) = {
      new nnCh in {
        NonNegativeNumber!(x, *nnCh) | for(@nn <- nnCh) {
          return!(nn)
        }
      }
    } | 
contract MakeMint(return) = {
      new pairCh, thisMint, internalMakePurse in {
        MakeBrandPair!(*pairCh) | for(@p <- pairCh) {
          match p {
            [seal, unseal] => {
              contract @[*thisMint, "makePurse"](@init, return) = {
                new balanceCh in {
                  @[*MakeMint, "int2NN"]!(init, *balanceCh) | for(@balance <- balanceCh) {
                    internalMakePurse!(balance, *return)
                  }
                }
              } |
              contract internalMakePurse(balance, return) = {
                
                new thisPurse in {
                  contract @[*thisPurse, "decr"](@amount, success) = { balance!("sub", [amount], *success) } |
                  contract @[*thisPurse, "incr"](@amount, success) = { balance!("addd", [amount], *success) } |
                  contract @[*thisPurse, "getBalance"](return) = { balance!("value", [], *return) } |
                  contract @[*thisPurse, "sprout"](return) = { @[*thisMint, "makePurse"]!(0, *return) } |
                  contract @[*thisPurse, "getDecr"](return) = { @seal!([*thisPurse, "decr"], *return) } |
                  contract @[*thisPurse, "deposit"](@amount, src, success) = {
                    new result in {
                      src!("getDecr", [], *result) | for(@sealedSrcDecr <- result) { 
                        @unseal!(sealedSrcDecr, *result) | for(@r <- result) { 
                          match r {
                            [srcDecr] => { 
                              @srcDecr!(amount, *result) | for(@r <- result) { 
                                match r {
                                  true => { 
                                    balance!("add", [amount], *success) 
                                  }
                                  _ => { success!(false) }
                                }
                              }
                            }
                            _ => { success!(false) }
                          }
                        }
                      }
                    }
                  } |
                  contract @[*thisPurse, "directpayment"](@amount, src, success1,success2) = {
                        balance!("dec", [amount], *success1) |
                        src!("incr", [amount], *success2)
                  } |
                  contract @[*thisPurse, "directpay"](@amount, src, success1,success2) = {
                        balance!("dec", [amount], *success1) |
                        src!("add", [amount], *success2)
                  } |
                  contract thisPurse(@method, @input, return) = {
                    @[*RhoClass, "functionApply"]!([*thisPurse, method], input, *return)
                  } |
                  return!(*thisPurse)
                }
              }
            }
          }
        } |
        contract thisMint(@method, @input, return) = {
          @[*RhoClass, "functionApply"]!([*thisMint, method], input, *return)
        } |
        return!(*thisMint)
      }
    } | 
contract NonNegativeNumber(@init, return) = {
      new this, valueStore in {
        contract @[*this, "add"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore){
                valueStore!(v + x) | success!(true)
              }
            }
            _ => { success!(false)  }
          }
        } |
        contract @[*this, "dec"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore){
                valueStore!(v - x) | success!(true)
              }
            }
            _ => { success!(false)  }
          }
        } |
        contract @[*this, "sub"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore) {
                match x <= v {
                  true => {
                    valueStore!(v - x) | success!(true)
                  }
                  _ => { valueStore!(v) | success!(false) }
                }
              }
            }
            _ => { success!(false) }
          }
        } |
        contract @[*this, "addd"](@x, success) = {
          match x >= 0 {
            true => {
              for(@v <- valueStore) {
                match x <= v {
                  true => {
                    valueStore!(v + x) | success!(true)
                  }
                  _ => { valueStore!(v) | success!(false) }
                }
              }
            }
            _ => { success!(false) }
          }
        } |
        contract @[*this, "value"](return) = {
          for(@v <- valueStore) {
            valueStore!(v) | return!(v)
          }
        } |
        contract this(@method, @input, return) = {
          @[*RhoClass, "functionApply"]!([*this, method], input, *return)
        } |
        return!(*this) |
        match init >= 0 {
          true => { valueStore!(init) }
          _ => { valueStore!(0) } 
        }
      }
    } | 
contract MakeBrandPair(return) = {
    new seal, unseal, key in {
      contract seal(@data, return) = {
        new sealedData in {
          contract sealedData(@input, return) = {
            match input == *key {
              true => { return!([data]) }
              _ => { return!([]) }
            }
          } |
          return!(*sealedData)
        }
      } |
      contract unseal(sealedData, return) = { sealedData!(*key, *return) } |
      return!([*seal, *unseal])
    }
  } | 
contract @[*RhoClass, "apply"](name, @args) = {
    match args {
      [a]                => { name!(a) }
      [a, b]             => { name!(a, b) }
      [a, b, c]          => { name!(a, b, c) }
      [a, b, c, d]       => { name!(a, b, c, d) }
      [a, b, c, d, e]    => { name!(a, b, c, d, e) }
      [a, b, c, d, e, f] => { name!(a, b, c, d, e, f) }
      _                  => { name!(args) }
    }
  } | 
contract @[*RhoClass, "functionApply"](name, @input, return) = {
    match input {
      []                 => { name!(*return) }
      [a]                => { name!(a, *return) }
      [a, b]             => { name!(a, b, *return) }
      [a, b, c]          => { name!(a, b, c, *return) }
      [a, b, c, d]       => { name!(a, b, c, d, *return) }
      [a, b, c, d, e]    => { name!(a, b, c, d, e, *return) }
      [a, b, c, d, e, f] => { name!(a, b, c, d, e, f, *return) }
      _                  => { name!(input, *return) }
    }
  } | 
Nil | 
new myRhobustContractTEST, myRhobustContract_Joe , myRhobustContract_Irs , myRhobustContract_Boss, ack, stdout(`rho:io:stdout`), stdoutAck(`rho:io:stdoutAck`),
ackJoe, resJoe, 
ackIrs, resIrs, 
ackBoss, resBoss,
ackCoop, resCoop,
myRhobustContract_Coop,
resProc_Joe,ackProc_Joe,
resProc_Irs,ackProc_Irs,
resProc_Boss,ackProc_Boss,
resProc_coop,ackProc_Coop,
aliceWalletBalance,bobWalletBalance,
getMintA,getMintB,getMintC, getPurseA,getPurseB,getPurseC,getPurseD,getBalanceA,getBalanceAB,getBalanceB,getBalanceC,getBalanceD,ccDep1 ,ccDep2,ccDep3 ,ccDep4,ccDep5 ,ccDep6,ackBoss2 in {
stdout!("TEST STEP 1 : Creating sample rhobust contract") | 
@"RhobustFactory"!(*ack) | 
for(@uri2 <- ack) {
        @"RhobustContractorFactory"!({"uri":uri2,"name:":"Joe", "amount": 10000}, *getPurseA) |
        @"RhobustContractorFactory"!({"uri":uri2,"name:":"boss", "amount": 10000}, *getPurseB) |
        @"RhobustContractorFactory"!({"uri":uri2,"name:":"irs", "amount": 10000}, *getPurseC) |
        @"RhobustContractorFactory"!({"uri":uri2,"name:":"coop", "amount": 10}, *getPurseD) |
        for (@purseJoe <- getPurseA;@purseBoss <- getPurseB;@purseIrs <- getPurseC;@purseCoop <- getPurseD) {
            
            @[purseJoe, "getBalance"]!(*getBalanceA)
            | for(@balanceJoe <- getBalanceA) {
                stdout!(["Joe BEFORE", balanceJoe])
            } |
            @[purseIrs, "getBalance"]!(*getBalanceB)
            | for(@balanceIrs <- getBalanceB) {
                stdout!(["irs BEFORE", balanceIrs])
            } |
            @[purseBoss, "getBalance"]!(*getBalanceC)
            | for(@balanceBoss <- getBalanceC) {
                stdout!(["boss BEFORE", balanceBoss])
            } |
            @[purseCoop, "getBalance"]!(*getBalanceD)
            | for(@balanceCoop <- getBalanceD) {
                stdout!(["coop BEFORE", balanceCoop])
            } |
            
            
            
            
            
            
            
            
            
            @"RhobustFactorySign"!(*myRhobustContract_Joe, uri2,"sign", "Joe","secretkey_employee", *ackJoe) |
            for(resJoe <- ackJoe) {
                stdout!(*resJoe) |
            
                
                
                @"RhobustFactorySign"!(*myRhobustContract_Coop, uri2,"sign",  "coop","secretkey_coop", *ackCoop) |
                for(resCoop <- ackCoop) {
                    stdout!(*resCoop) |
                
                    
                    
                    @"RhobustFactorySign"!(*myRhobustContract_Irs, uri2,"sign",  "irs","secretkey_irs", *ackIrs) |
                    for(resIrs <- ackIrs) {
                        stdout!(*resIrs) |
                
                        
                        
                        
                        @"RhobustFactorySign"!(*myRhobustContract_Boss, uri2,"sign",  "boss","secretkey_employer", *ackBoss) |
                        for(resBoss <- ackBoss){
                            
                            @"RhobustFactoryPay"!(*myRhobustContract_Boss, uri2,"pay",  "boss","secretkey_employer", 5500, purseBoss, purseJoe, purseIrs, purseCoop, *ackBoss2) |
                            
                            for(@res2<-ackBoss2) {
                                stdout!(res2.get("c")) |
                                
                                
            
                                @[purseJoe, "getBalance"]!(*getBalanceA)
                                | for(@balanceJoe <- getBalanceA) {
                                    stdout!(["Joe  AFTER", balanceJoe])
                                }
                                |
                                @[purseBoss, "getBalance"]!(*getBalanceB)
                                | for(@balanceBoss <- getBalanceB) {
                                    stdout!(["boss AFTER", balanceBoss])
                                }
                                |
                                @[purseIrs, "getBalance"]!(*getBalanceC)
                                | for(@balanceIrs <- getBalanceC) {
                                    stdout!(["irs  AFTER", balanceIrs])
                                }
                                |
                                @[purseCoop, "getBalance"]!(*getBalanceD)
                                | for(@balanceCoop <- getBalanceD) {
                                    stdout!(["coop  AFTER", balanceCoop])
                                }
                            }
                        }
                    }
                }
            }
        } 
    }
} | 
new
stdout(`rho:io:stdout`),
ri(`rho:registry:insertArbitrary`), 
rl(`rho:registry:lookup`),
stdoutAck(`rho:io:stdoutAck`),
RhobustContract,
RhobustContractor,
Object, 
contractCh,
ackContract,  
ackInfo,resInfo,
ackRegister,
resRegister,
ackRl,resRl,
ack, ackContractCh,
pay, ackPay,
invoiceId, invoiceAmount, invoiceName, 
processIncomeTax, widthdraw, taxPay, 
logResolve, 
uriChan, uriChan2, uri2,
logTransaction,
agentType,secretKey,
ackwithdraw,acktaxPay,ackprocessIncomeTax,
RhobustContractSign,ackRhobustContractSign,
RhobustContractPay,ackRhobustContractPay,
uriPChan,getPurse,mint, p1, p2,ccDep1,ccDep2,sccDep1,sccDep2,sccDep3,sccDep4,sccDep5,sccDep6,sccDep7,sccDep8
in {
    
    contract @"RhobustFactory"(result) = {
        new 
        ri(`rho:registry:insertArbitrary`), 
        rl(`rho:registry:lookup`) in {
            
            ri!(bundle+{*RhobustContract}  , *uriChan) |
            for(@uri <- uriChan) {
                
                rl!(uri, *contractCh) |
                for( ct <- contractCh) {
                    ct!("new",[{"contract_id": uri, "data": true},*ackContract]) |
                    for ( myContract <- ackContract) { 
                        
                        ri!(bundle+{*myContract}  , *uriChan2) |
                        for(@uri2 <- uriChan2) {
                            
                            result!(uri2)
                        }
                    }
                }
            }
        }
    } |
    contract @"RhobustContractorFactory"(@props, result) = {
        RhobustContractor!("new",props.get("amount"),[{"contract_uri": props.get("uri"), "name": props.get("name"), "starting_balance": props.get("amount"), "data": true},*result])
    } |
    contract @"RhobustFactorySign"(rhobustLookup, @uri, @action, @name, @key, resultLookup) = {
        
        rl!(uri, *contractCh) |
        for( ct <- contractCh) {
            RhobustContractSign!(name, key, *ackRhobustContractSign) |
            for(@resRhobustContractSign <- ackRhobustContractSign) {
                resultLookup!(resRhobustContractSign)
            }
        }
    } | 
    contract @"RhobustFactoryPay"(rhobustLookup, @uri, @action, @name, @key,@amount,p1,p2,p3,p4, resultLookup) = {
        
        rl!(uri, *contractCh) |
        for( ct <- contractCh) {
            RhobustContractPay!(name, key, amount,*p1,*p2,*p3,*p4, *ackRhobustContractPay) |
            for(@resRhobustContractPay <- ackRhobustContractPay) {
                resultLookup!(resRhobustContractPay)
            }
        }
    } |
    
    
    contract RhobustContract(@"new", @[
        propsMap,
        *return]) = { 
            new instance, ret in {
            stdout!(["new contract",{"props": propsMap}, *instance]) |
            Object!(*RhobustContract, *instance, *ret) |
            for ( @object <- ret ) {
                instance!({"object": object, "contract": bundle+{*RhobustContract}, "props": propsMap }) |
                return!(object)
            }
        }
    } |
    
    contract RhobustContract(this, @"get", @[name, *value]) = {
        for (@nod <- this) {
            this!(nod) |
            value!(nod.get("props").get(name))
        }
    } |
    
    contract RhobustContract(this, @"set", @[name, value, *ack]) = {
        for (@nod <- this) {
            this!(nod.set("props",nod.get("props").set(name,value))) |
            ack!(Nil)
        }
    } |
    
    contract RhobustContractor(@"new", @amount, @[
        propsMap,
        *return]) = { 
            new instance, ret in {
                MakeMint!(*mint) |
                for(@m <- mint) {
                    
                    @[m, "makePurse"]!(amount, *getPurse) |
                    for (@p <-getPurse) {
                        
                        
                        
                            
                            stdout!(["new contractor",{"props": propsMap/*,"purse_uri": uri*/}]) |
                            Object!(*RhobustContractor, *instance, *ret) |
                            for ( @object <- ret ) {
                                stdout!("contractor object created !") |
                                instance!({"object": object, "props": propsMap }) |
                                return!(p)
                            }
                        
                    }
                }
            }
    } |
    
    contract RhobustContractor(this, @"get", @[name, *value]) = {
        for (@nod <- this) {
            this!(nod) |
            value!(nod.get("props").get(name))
        }
    } |
    
    contract RhobustContractor(this, @"set", @[name, value, *ack]) = {
        for (@nod <- this) {
            this!(nod.set("props",nod.get("props").set(name,value))) |
            ack!(Nil)
        }
    } |
    
    contract RhobustContractPay(@agentType, @secretKey, @amount, p1, p2,p3,p4, ackSign) = {
    
        if (agentType == "boss" and secretKey == "secretkey_employer") {
            
            pay!(*p1, *p2,*p3,*p4,*invoiceId, *invoiceName, *invoiceAmount, "Joe", amount ,"Hello " ++ agentType ++ " you just paid Joe. transaction fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackPay)| 
            for (@aa <- ackPay) {
                ackSign!(aa)
            }
        }
    } |
    
    contract RhobustContractSign(@agentType, @secretKey, ackSign) = {
    
        if (agentType == "boss" and secretKey == "secretkey_employer") {
            
            logResolve!("Hello " ++ agentType ++ ", you will pay soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        
        } else 
        if (agentType == "Joe" and secretKey == "secretkey_employee") {
            
            logResolve!("Hello " ++ agentType ++ ", you will get payed soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        }  else 
        if (agentType == "coop" and secretKey == "secretkey_coop") {
            
            logResolve!("Hello " ++ agentType ++ ", you will get payed soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        }  else 
        if (agentType == "irs" and secretKey == "secretkey_irs") {
            
            logResolve!("Hello " ++ agentType ++ ", tax income will be transfered soon. transaction will be fullfiled using your key ${secretKey}" %% {"secretKey": secretKey}, *ackSign)
        } else {
            
        }
    } |
    
    
    contract RhobustContract(this, @"register", @[*ret]) = {
        new RhobustContractChan, uriChan in {
            for( @RhobustContract <- this) {
                if (RhobustContract.get("uri") != Nil ) {
                    stdout!(["RhobustContract",RhobustContract.get("uri")]) |
                    ret!(RhobustContract.get("uri")) |
                    this!(RhobustContract)
                } else {
                    ri!(*this, *uriChan) |
                    for(@uri <- uriChan) {
                        stdout!(["RhobustContract",uri]) |
                        this!(RhobustContract.set("uri",uri)) |
                        ret!(uri)
                    }
                }
            }
        }
    } | 
    
    
    contract Object(class, @instance, ret) = {
        new this in {
            ret!(bundle+{*this}) |
            
            contract this(@method, args) = {
                class!(instance, method, *args)
            }
        }
    } |
    
    
    contract logResolve(@message, cb) = {
        cb!(message)
    } |
    
    
    contract logTransaction(@tid,@action,@nameWorker,@nameCurrentAgent,@amount,@message)= {
        stdout!(["transaction id:",tid,"action:",action,"nameCurrentAgent:",nameCurrentAgent,"amount:",amount,"message:",message])
    } |
    
    contract pay(p1, p2, p3, p4, pId, pName, pAmount, @name,@amount,@message, ackEnd) = {
        new Y, H in {
        
        @"keccak256Hash"!(name.toByteArray(), *Y) 
            |  
            for (@H <- Y) { 
                @[*p1, "directpayment"]!(amount, *p2, *ccDep1, *ccDep2) |
                for (@aa <- ccDep1; @bb <- ccDep2) {
                    
                    logTransaction!(H, "payment", name, "employer", amount," << salary payed ! (AGENT A)") | 
                    
                    pId!(H) | pName!(name) | pAmount!(amount) |
                    for(@paymentId <- invoiceId;@paymentName <- invoiceName;@amount <- invoiceAmount) {
                        
                        
                        
                        @[*p2, "directpayment"]!(amount/2, *p3, *sccDep1, *sccDep2) |
                        
                        
                        @[*p1, "directpayment"]!(1, *p4, *sccDep3, *sccDep4) |
                        
                        
                        @[*p2, "directpayment"]!(1, *p4, *sccDep5, *sccDep6) |
                        
                        
                        @[*p3, "directpayment"]!(1, *p4, *sccDep7, *sccDep8) |
                        
                        for (@a1 <- sccDep1; @b2 <- sccDep2;@c3 <- sccDep3; @d4 <- sccDep4;@e5 <- sccDep5; @f6 <- sccDep6;@g7 <- sccDep7; @h8 <- sccDep8) {
                            ackEnd!({"a":a1,"b":b2,"c":H})
                        } 
                        
                    }
                }
            }
        }
    } 
}
}
